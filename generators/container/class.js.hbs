/**
 *
 * {{properCase name }} Container
 *
 */
{{#if wantTransLate}}

/* global translate */
{{/if}}

import React from 'react';
// import PropTypes from 'prop-types';
// import { Actions } from 'react-native-router-flux';
import { compose } from 'redux';
import { connect } from 'react-redux';
{{#if wantActionsAndReducer}}
import { createPropsSelector } from 'reselect-immutable-helpers';
{{/if}}
import {
  Container, Content, Text,
} from 'native-base';

// utils => ... => containers => components => form
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
{{/if}}
{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}

// import xxx from 'components/xxx';
{{#if wantHeader}}
import AppHeader from 'components/AppHeader';
{{/if}}
{{#if wantFooter}}
import AppFooter from 'components/AppFooter';
{{/if}}

// ./
{{#if wantActionsAndReducer}}
// import { XXX } from './constants';
import { selectGenerateText } from './selectors';
// import { defaultAction } from './actions';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import sagas from './sagas';
{{/if}}
import styles from './styles';

export class {{ properCase name }} extends {{{ type }}} { // eslint-disable-line
  // constructor(props) {
  //   super(props);
  //   this.state = {
  //   };
  // }

  // componentDidMount() {
  // }

  render() {
    {{#if wantActionsAndReducer}}
    const { generateText } = this.props;
    {{/if}}
    return (
      <Container>
        {{#if wantHeader}}
        <AppHeader title="{{camelCase name}}" />

        {{/if}}
        <Content
          contentContainerStyle={styles.contentContainer}
          style={styles.content}
        >
          {{#if wantActionsAndReducer}}
          <Text style={styles.generateText}>{generateText}</Text>
          {{/if}}
          {{#if wantTransLate}}
          <Text style={styles.generateText}>{translate('generatorMessage')}</Text>
          {{else}}
          <Text style={styles.generateText}>This page is generated by the generator</Text>
          {{/if}}
        </Content>
        {{#if wantFooter}}

        <AppFooter pageName="{{camelCase name}}" />
        {{/if}}
      </Container>
    );
  }
}

{{ properCase name }}.defaultProps = {
{{#if wantActionsAndReducer}}
    generateText: '',
{{/if}}
};

{{ properCase name }}.propTypes = {
{{#if wantActionsAndReducer}}
    generateText: PropTypes.string,
{{/if}}
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createPropsSelector({
  // write your code like this
  generateText: selectGenerateText,
});

{{/if}}
const mapDispatchToProps = (dispatch) => ({
  // Use your actions here
  dispatch,
});

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });

{{else}}
const withConnect = connect(null, mapDispatchToProps);

{{/if}}
{{#if wantSaga}}
const withSagas = sagas.map((saga) => injectSaga(saga));

{{/if}}
export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  ...withSagas,
{{/if}}
  withConnect,
)({{ properCase name }});
